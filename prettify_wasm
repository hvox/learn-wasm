#!/usr/bin/env python3
import sys
from pathlib import Path
from string import whitespace


def text_to_ast(source):
    node = root = []
    parents = []
    string = ""
    for char in source.rstrip() + "\n":
        match char:
            case "(":
                if string.strip():
                    node.append(string.strip())
                string = ""
                parents.append(node)
                parents[-1].append(node := [])
            case ")":
                if string.strip():
                    node.append(string.strip())
                string = ""
                node = parents.pop()
            case delimiter if delimiter in whitespace:
                if string.strip():
                    node.append(string.strip())
                string = ""
            case char:
                string += char
    assert len(node) == 1
    assert len(root) == 1
    assert not string.strip()
    return root[0]


def ast_to_text(ast):
    if isinstance(ast, str):
        return ast
    ast = [x for x in ast if isinstance(x, list) or x.strip()]
    if len(ast) == 0:
        return "()"
    if len(ast) == 1 and isinstance(ast[0], str):
        return "".join(x.strip() + "\n" for x in ast[0].strip().split("\n"))
    lines = [f"({ast[0]}"]
    for x in ast[1:]:
        for line in ast_to_text(x).split("\n"):
            lines.append("\t" + line)
    lines.append(")")
    return "\n".join(lines)


def main(args: list[str]):
    assert len(args) == 2
    source = Path(args[1]).read_text()
    print(source)
    ast = text_to_ast(source)
    print(f"\x1b[93m{ast}\x1b[0m")
    print(ast_to_text(ast))


if __name__ == "__main__":
    main(sys.argv)

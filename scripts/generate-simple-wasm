#!/usr/bin/env python3
"""
Yet another script of mine.

Usage: {script} [options] PATH

Arguments:
    PATH - Path to the future wasm file.

Options:
    -h, --help
        Show this screen and exit.
"""
import sys
from contextlib import suppress
from pathlib import Path


TYPE_SECTION_ID = 1
IMPORT_SECTION_ID = 2
FUNCTION_SECTION_ID = 3
EXPORT_SECTION_ID = 7
CODE_SECTION_ID = 10

I32_ID = 0x7F
REF_ID = 0x6F
STR_ID = 0x64


def generate_wasm():
    code = [
        0,  # Number of local variables
        *[0xD0, 0x6F],  # Put null into stack
        *[0x41, 42],  # Put coonstant into stack
        0x0F,  # Return from function
        0x0B,  # End of expression
    ]
    yield from b"\0asm\1\0\0\0"
    yield from pack_section(TYPE_SECTION_ID, bytes([1, 0x60, 0, 1, I32_ID]))
    yield from pack_section(IMPORT_SECTION_ID, bytes([0]))
    yield from pack_section(FUNCTION_SECTION_ID, bytes([1, 0]))
    yield from pack_section(EXPORT_SECTION_ID, b"\1\4main\0\0")
    yield from pack_section(CODE_SECTION_ID, bytes([1, len(code)]) + bytes(code))


def pack_section(id: int, content: bytes):
    assert len(content) < 128
    return bytes([id, len(content)]) + content


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    path = Path(args["PATH"])
    path.write_bytes(bytes(generate_wasm()))


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
